<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Final Project on AWS Basics</title><link>https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/</link><description>Recent content in Final Project on AWS Basics</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 May 2022 14:45:47 -0500</lastBuildDate><atom:link href="https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Spring Persistent</title><link>https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/java-spring-persistent/java-techjobs/</link><pubDate>Wed, 04 May 2022 14:45:47 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/java-spring-persistent/java-techjobs/</guid><description>Deploying a Persistent Spring Boot Application Now that you have worked closely with the EC2 and S3 service it is time to take things one step further. You are going to deploy a web application that is connected to a MySQL database.
Below you will find the steps outlined.
Getting Organized What needs to happen for the Java/Spring Persistent web application to be deployed?
You will need:
New EC2 Instance Built Artifacts of application cloned to EC2 instance Correct version of Java installed on EC2 Web Server installed on EC2 Docker installed to create a MySQL container for the database EC2 Instance Created Name of Instance: java-spring-persistent AMI: Ubuntu 22.</description></item><item><title>Scripting with User Data</title><link>https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/java-spring-persistent/java-techjobs-scripted/</link><pubDate>Wed, 04 May 2022 14:45:47 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/aws-basics/final-project/java-spring-persistent/java-techjobs-scripted/</guid><description>Deploying a Persistent Spring Boot Application With User Data After deploying the persistent Java application you can take things one step further and create your EC2 instance providing User Data
User Data is a way for us to give instructions to the EC2 instance to complete on creation. This allows you to automate the process of installing the requirements to deploy your web application.
Getting Organized This walkthrough will take the Java/Spring application deployment requirements and store them inside of one script.</description></item></channel></rss>