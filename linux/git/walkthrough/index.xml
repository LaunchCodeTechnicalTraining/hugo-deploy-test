<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Walkthrough on Linux Introduction</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/</link><description>Recent content in Walkthrough on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 Nov 2021 15:20:12 -0600</lastBuildDate><atom:link href="https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Branches</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/git-branching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/git-branching/</guid><description>Branching Working with branches allows you to diverge from the master branch of development.
Working on a branch separate from the master branch provides many benefits. One of which is to create, read, update, and delete content without breaking anything on the master branch.
In the Git Branches walkthrough you will be doing the following:
Creating new branches with git branch Changing branches with git checkout Fixing existing bugs staging changes with git add and git commit Pushing changes to remote repositories with git push Content Links Creating Branches Changing Branches Staging Changes Note The walkthrough articles in this section will be using the py-demo-web-logs repository you cloned in the Review: Basic Git Workflow.</description></item><item><title>Merging</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/merging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/merging/</guid><description>Merge Strategies In this walkthrough you will find two different merge strategies: git merge and git rebase.
Both strategies have their own pros and cons.
The main benefit of git merge is that you keep the original history of the master branch in tact. However, conflicts are handled during the merge into the master branch.
The main benefit of the git rebase is that conflicts are handled in the feature branch and conflicts will not need to be managed when merging with the master branch.</description></item><item><title>Review: Basic Git Workflow</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/basic-git-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/basic-git-workflow/</guid><description>Review: Creating a Local Git Repo A common git task is to create a new directory and then initialize a git repository inside of the directory. This is likely a task you have done before, but we will be reviewing it together.
For this example you will create a new directory inside of your user home directory called local-repository.
cd to your user home directory (home/student) make a folder called local-repository cd into your newly created directory Now you will need to initialize git inside of this new directory you created with the git init command.</description></item><item><title>Forking a Repository</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/forking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/forking/</guid><description>Forking a Repository A fork is a copy of a pre-existing repository.
The major benefit of working with a forked repo is that any changes you make won&amp;rsquo;t directly affect the original repository you forked. You are free to make changes to files and directories and push those changes to your forked repo. This can be very useful for your own experimentation or ideas you have that you want to add to a pre-existing project.</description></item><item><title>Cloning a Repository</title><link>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/cloning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/git/walkthrough/cloning/</guid><description>Note In this article we will be using the Repository we forked in the previous walkthrough article.
Git Clone Cloning a repo will work for any repository on GitHub you are authenticated to view. An original project, a forked project, or a project you have created previously that you would like to access on a new machine.
The command used to accomplish this task is git clone.</description></item></channel></rss>