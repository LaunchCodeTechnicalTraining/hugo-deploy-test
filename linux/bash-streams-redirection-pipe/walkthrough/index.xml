<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Walkthrough on Linux Introduction</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/</link><description>Recent content in Walkthrough on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Apr 2022 13:54:05 -0500</lastBuildDate><atom:link href="https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/index.xml" rel="self" type="application/rss+xml"/><item><title>Redirect STDOUT Write File</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdout-write-file/</link><pubDate>Fri, 08 Apr 2022 13:54:05 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdout-write-file/</guid><description>STDOUT Redirection By default STDOUT goes to the terminal window of the CLI.
Bash provides a collection of STDOUT redirection operators that give the user the ability to redirect STDOUT from the terminal window to a different location.
As a base example consider:
ls /home/student The results of this command are placed in STDOUT and by default STDOUT is directed to the CLI terminal window like so:
This default behavior can be changed by using one of the STDOUT redirection operators.</description></item><item><title>Redirect STDOUT Append File</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdout-append-file/</link><pubDate>Fri, 08 Apr 2022 13:54:05 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdout-append-file/</guid><description>Redirect STDOUT Append to File Bash also provides a STDOUT redirection append to file operator. In this case the contents of the existing file would not be overwritten, but instead a new line(s) would be added (append) at the end of the file.
Let&amp;rsquo;s try this out using the echo command:
echo &amp;#34;Hello, world!&amp;#34; &amp;gt;&amp;gt; hello-from-bash.txt Output and Validation:
Similarly to the write redirection operator, the append operator created a new file and added the contents from STDOUT to the file.</description></item><item><title>Pipe Operator</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/pipe-stdout-to-stdin/</link><pubDate>Fri, 08 Apr 2022 13:54:05 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/pipe-stdout-to-stdin/</guid><description>Convert STDOUT into STDIN of Following Command The Bash pipe operator | provides the abililty to take the STDOUT from the first command and use it as the STDIN for the next command.
The pipe operator is a powerful tool in Bash that allows us to create specific and sometimes complex commands.
The pipe operator syntax will look similar to: [bash-command-one] | [bash-command-two].
Whatever contents added to STDOUT from [bash-command-one] will be used as the STDIN for [bash-command-two].</description></item><item><title>Bonus: Redirect STDIN</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdin/</link><pubDate>Fri, 08 Apr 2022 13:54:05 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stdin/</guid><description>Redirect STDIN So far you have given bash commands input in two ways:
as command arguments via converting STDOUT from a preceding command into STDIN using the pipe operator These are the two ways you should expect to work with STDIN in this course.
However, there are additional ways you can provide input to bash commands.
STDIN Redirection from Here String cat &amp;lt;&amp;lt;&amp;lt; &amp;#34;hello&amp;#34; cat is concatenating the contents of the here string &amp;ldquo;hello&amp;rdquo;.</description></item><item><title>Bonus: Redirect STDERR</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stderr/</link><pubDate>Fri, 08 Apr 2022 13:54:05 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-streams-redirection-pipe/walkthrough/redirect-stderr/</guid><description>Standard Error Output stream used to display error messages.
Example broken bash command with a redirect into error.log file Redirect STDERR By default any error messages in STDERR are sent to the terminal window of the CLI shell.
cat non-existent-file.txt Output:
cat: non-existent-file.txt: No such file or directory Redirect STDERR Write STDERR can be redirected and written, or appended to a file similar to STDOUT, by using the write file 2&amp;gt; and append file 2&amp;gt;&amp;gt; redirection operators.</description></item></channel></rss>