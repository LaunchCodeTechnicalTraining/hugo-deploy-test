<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grep on Linux Introduction</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/</link><description>Recent content in grep on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/index.xml" rel="self" type="application/rss+xml"/><item><title>Regex: Line Begin Anchor</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-line-begin-anchor/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-line-begin-anchor/</guid><description>Regular Expression Line Begin Anchor: ^ You can match the beginning of a line with the Regular Expression line begin anchor: ^.
Earlier grep 'Paul' matched lines that had 'Paul' at any point in the line. If you want to match 'Paul' at the very beginning of each line you could use the line begin anchor: ^.
Match '^Paul' grep &amp;#39;^Paul&amp;#39; user.csv Output:
Take note that Bianca,Paul,... is not in our matched lines.</description></item><item><title>Regex: Line End Anchor</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-line-end-anchor/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-line-end-anchor/</guid><description>Regular Expression Line End Anchor: $ You can match the end of a line with the Regular Expression line end anchor $.
In the case of this specific data-set company names come at the end of each line.
Match 's$' Let&amp;rsquo;s match all lines that end with the letter s:
grep &amp;#39;s$&amp;#39; user.csv Output:
Any line that ends with the letter s has been matched, in the case of this dataset Express Scripts and Edward Jones both match our provided pattern.</description></item><item><title>Regex: Any Character Symbol</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-any-character/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-any-character/</guid><description>Regular Expression Any Character: . You can use the any character reserved symbol (.) to instruct the Regular Expression pattern to match any single character.
Match '^.a' Let&amp;rsquo;s match all lines that start with any character, but the second character must be the lowercase letter a:
grep &amp;#39;^.a&amp;#39; user.csv Output:
Note This RegEx pattern '^.a' is combining the Line Begin Anchor and the match any character symbol .. RegEx allows you to mix and match the special syntax to create highly specific patterns.</description></item><item><title>Regex: Matching Set</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-set/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/regex-set/</guid><description>Regular Expression Sets: [] You may not want to match every character, but a large number of specific characters. RegEx gives you the ability to match any character in a given set by using the special bracket characters [].
For example:
match any lowercase letter [a-z] match any uppercase letter [A-Z] match any single digit [0-9] match a comma, period, or semicolon [,.;] match any case letter and the numbers 1-5 [a-zA-Z1-5] You can build whatever set fits your specific needs.</description></item><item><title>grep From STDIN</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/grep-stdin/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/grep-stdin/</guid><description>grep from STDIN So far you have only used grep to search a specific file. However, you can pass input directly to grep and match STDIN results against a Regular Expression pattern.
ls | grep Example Match patterns for all contents of the home directory:
Match all files with a . in our home directory.
ls ~ | grep &amp;#39;\.&amp;#39; Output:
Note The . is a Regular Expression special symbol meaning to match any character.</description></item><item><title>grep Chaining</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/grep-chaining/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/grep-chaining/</guid><description>Chaining grep We can even pass the output from a grep command to another grep command to build complex filter chains.
Step One: Get our Dataset curl -s https://launchcodetechnicaltraining.org/api/walkthrough/user?data_format=csv Output:
25000 records is too much.
Step Two: Filter Matches '^John' Filter data to include only '^John':
curl -s https://launchcodetechnicaltraining.org/api/walkthrough/user?data_format=csv | grep &amp;#39;^John,&amp;#39; Output:
Step Three: Filter Matches 'Microsoft$' Using the output from the previous filter, filter further to include lines that match 'Microsoft$'.</description></item><item><title>Bonus Regular Expressions</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/bonus/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/grep/bonus/</guid><description>At Least One, Possibly More + curl -s https://launchcodetechnicaltraining.org/api/walkthrough/transaction?data_format=csv | grep &amp;#39;\$5[0-9]\+&amp;#39; Maybe One, Possibly More * curl -s https://launchcodetechnicaltraining.org/api/walkthrough/user?data_format=csv | grep &amp;#39;^Paula*&amp;#39; Match Exact Number {} Bonus echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paul&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paul$&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paula$&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paula*$&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paula\+$&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paula\{1\}$&amp;#39; echo -e &amp;#34;Paul\nPaula\nPaulaaaaaa\nTim&amp;#34; | grep &amp;#39;^Paula\{6\}$&amp;#39; Regular Expression Groups () curl -s https://launchcodetechnicaltraining.</description></item></channel></rss>