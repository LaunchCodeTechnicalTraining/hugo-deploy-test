<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sed on Linux Introduction</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/</link><description>Recent content in sed on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/index.xml" rel="self" type="application/rss+xml"/><item><title>Substitute: Correct user-data.csv</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-correct-user-data/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-correct-user-data/</guid><description>Correct user-data.csv The user-data.csv file we downloaded from https://launchcodetechnicaltraining.org/api/walkthrough/user?data_format=csv has a couple of mistakes we need to fix across the entire file.
Typo: company mastercard should be Mastercard Typo: company spectrum should be Spectrum Company Stephens-Griffin name changed to: Stephens-Griffin-Ferguson sed substitute &amp;lsquo;mastercard&amp;rsquo; with &amp;lsquo;Mastercard&amp;rsquo; Run a substitute command:
sed &amp;#39;s/mastercard/Mastercard/&amp;#39; user-data.csv Output:
However, this doesn&amp;rsquo;t alter the file it simply displays the substitution in STDOUT.
Bonus You can see that the change didn&amp;rsquo;t take place by running grep 'mastercard' user-data.</description></item><item><title>Substitute: Convert CSV to TSV</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-convert-csv-tsv/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-convert-csv-tsv/</guid><description>sed substitute &amp;lsquo;,&amp;rsquo; with &amp;lsquo;\t&amp;rsquo; Convert the user-data.corrected.csv to a tsv file:
Run:
sed &amp;#39;s/,/\t/g&amp;#39; user-data.corrected.csv &amp;gt; user-data.corrected.tsv Validation ls Output:
A new file exists: user-data.corrected.tsv.
Inspect it:
cat user-data.corrected.tsv Output:</description></item><item><title>Sed From STDIN</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/sed-from-stdin/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/sed-from-stdin/</guid><description>sed from STDIN So far you have only performed sed substitute commands using a file as input, however you can re-route STDOUT from another command to use as the STDIN for sed.
This allows you to combine sed with other tools like grep.
In this example you will be using grep to match users with a specific last name. However, you don&amp;rsquo;t want the Company the person works for, just their first and last names, and their email address.</description></item><item><title>Chaining Sed</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/sed-chaining/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/sed-chaining/</guid><description>Chaining Sed Another benefit of using STDIN when working with sed is the ability to chain multiple substitutions (or other sed scripts). The final example of the last article was an example of chaining sed, but you will get another example here.
In an earlier walkthrough you corrected the user-data.csv.
It took a total of three steps to complete the task. However, you could have chained all of the steps together using the pipe (|) operator.</description></item><item><title>Substitute: Reference Whole Match</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-reference-whole-match/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/substitute-reference-whole-match/</guid><description>Whole Match Reference &amp;amp; Using sed substitute you may want to keep the pattern you matched and simply add additional text to it. You can use the match reference symbol &amp;amp; to achieve this.
Add : PAID IN FULL to each line ending in Microsoft as they have settled their fictional debts with us:
sed &amp;#39;s/Microsoft$/&amp;amp;: PAID IN FULL/&amp;#39; user-data.corrected.csv Output (after scrolling up to find a line ending in Microsoft):</description></item><item><title>Bonus: Substitute: Reference Match Groups</title><link>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/bonus-substitutue-reference-groups/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://launchcodetechnicaltraining.org/linux/userspace-applications/walkthrough/sed/bonus-substitutue-reference-groups/</guid><description>BONUS This entire section is a bonus. It probably won&amp;rsquo;t be covered, but you can run the examples to see what is happening, and learn even more about RegEx and sed.
Bonus: Reference Groups Enter a Nickname sed -E &amp;#39;s/(Phillip),(Holmes),/\1 &amp;#34;Phil&amp;#34;,\2,/&amp;#39; user-data.corrected.csv | grep &amp;#39;Phillip &amp;#34;Phil&amp;#34;&amp;#39; The replacement text is:
\1: text from first match group &amp;quot;Phil&amp;quot;,: the exact string of one space, quotes around Phil and a comma \2: text from second match group ,: an exact comma Switch first_name &amp;amp; last_name columns sed -E &amp;#39;s/^([^,]+,)([^,]+,)/\2\1/&amp;#39; user-data.</description></item></channel></rss>