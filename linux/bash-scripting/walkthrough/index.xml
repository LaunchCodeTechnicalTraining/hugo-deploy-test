<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Walkthrough on Linux Introduction</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/</link><description>Recent content in Walkthrough on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Apr 2022 13:54:20 -0500</lastBuildDate><atom:link href="https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/index.xml" rel="self" type="application/rss+xml"/><item><title>Scripting</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/script/</link><pubDate>Fri, 08 Apr 2022 13:54:20 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/script/</guid><description>Bash Scripting A bash shell script is a file that holds a set of bash commands to be read and executed by Bash.
Bash files are commonly denoted with a .sh file extension for example: example-script.sh.
Additionally the first line of a Bash script commonly contains a shebang. A shebang is a line that informs the operating system of the exact shell to use when executing the script. The shebang simply points to the absolute path of the shell.</description></item><item><title>Variables</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/bash-variables/</link><pubDate>Fri, 08 Apr 2022 13:54:20 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/bash-variables/</guid><description>Creating Bash Variables Bash is able to hold values within a named variable similar to programming languages like Java, JavaScript, Python, and many more.
Notice how bash uses the equal sign (=) as an assignment operator.
Bash Python JavaScript Java name=&amp;#34;John&amp;#34; name = &amp;#34;Paul&amp;#34; let name = &amp;#34;Paul&amp;#34;; String name = &amp;#34;John&amp;#34;; Note Similar to Python, Bash will respect any type of value you assign to a variable.</description></item><item><title>Conditionals</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/conditionals/</link><pubDate>Fri, 08 Apr 2022 13:54:20 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/conditionals/</guid><description>Conditional Statements in Bash Similar to many programming languages bash allows you to write conditional statements to control the flow of a script:
Bash Python JavaScript Java if [[ condition ]] then clause statement fi if condition: clause statement if (condition) { clause statement } if (condition) { clause statement } Bash requires a closing &amp;ldquo;fi&amp;rdquo; for if statements.</description></item><item><title>Loops</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/loops/</link><pubDate>Fri, 08 Apr 2022 13:54:20 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/loops/</guid><description>Looping with Bash Similar to other programming languages like Java, JavaScript, and Python you are also able to write for loops in bash:
Bash Python JavaScript Java for item in [LIST] do [COMMANDS] done for element in collection: loop body for (Virable Initialization; Loop Exit Condition; Variable Modification) { loop body } for (Variable Initialization; Loop Exit Condition; Variable Modification) { loop body } You can also write while loops:</description></item><item><title>Bring it All Together</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/bring-it-together/</link><pubDate>Fri, 08 Apr 2022 13:54:20 -0500</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-scripting/walkthrough/bring-it-together/</guid><description>Combinig Concepts Now that you have learned how to create write a basic bash script, assign values to variables, write conditional and loop statements lets combine them all into one script!
Create a new file called high-low.sh
#!/bin/bash ## Create new ArrayList high_low=(15 10 -3 5 23 -5) ## Loop through ArrayList for item in ${high_low[@]} do ## Compare item in list to current high_value if [[ $item -gt $high_value ]] then high_value=$item fi ## Compare item in list to current low_value if [[ $item -lt $low_value ]] then low_value=$item fi done ## echo items to stdout and redirect: append the results into a new file echo &amp;#34;The highest value is: &amp;#34;$high_value &amp;gt;&amp;gt; high-values.</description></item></channel></rss>