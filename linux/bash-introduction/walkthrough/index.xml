<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Walkthrough on Linux Introduction</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/</link><description>Recent content in Walkthrough on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Feb 2022 14:54:25 -0600</lastBuildDate><atom:link href="https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/index.xml" rel="self" type="application/rss+xml"/><item><title>Terminal Emulator</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/terminal-emulator/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/terminal-emulator/</guid><description>Terminal Emulator To use this text-based Bash shell on our Ubuntu machines we will need to open a terminal emulator application. The terminal emulator is the graphical software that provides many features including:
a window a window exit button minimize and maximize window buttons The terminal emulator is also configured to:
handle key-press events handle click events receive Bash commands display Bash Standard Output (STDOUT) The terminal emulator we will be using in this class is simply called terminal.</description></item><item><title>Bash Command Basics</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/bash-command-basics/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/bash-command-basics/</guid><description>Bash Command Basics This Bash shell is expecting text based commands. However, we must follow the rules for inputting the commands.
All Bash commands follow this basic pattern: command-name --option(s) argument(s).
Note The previous command is non-executable and serves only as an example of command structure.
Most commands have at least one argument, however they can have no arguments, provide default arguments, or sometimes allow for multiple arguments.</description></item><item><title>Bash Command: pwd</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/pwd/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/pwd/</guid><description>pwd command Let&amp;rsquo;s try out our first command: pwd. pwd is one of the Bash commands that takes no arguments.
Simply type pwd into your terminal and hit enter.
Note Make sure you only type pwd into your terminal before hitting enter. Since the Bash shell is expecting text it requires the text you enter to exactly match it&amp;rsquo;s expectations.
pwd stands for print working directory. You will notice the output of the command is simply the text /home/student.</description></item><item><title>Bash Command: clear</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/clear/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/clear/</guid><description>clear command Our next command also takes no arguments. clear will clear the terminal emulator of all text.
Enter clear into your terminal.
Then submit the command with enter.
All that text is gone! We now have a clean slate to continue working.
Note Most future images in this course will clear the screen before running new commands.</description></item><item><title>Bash Command: ls</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/ls/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/ls/</guid><description>ls command Our next command will list out the contents of either our current working directory or a specific directory: ls.
ls will use your current working directory as a default argument if you do not provide an argument. So to list out the contents of your current working directory you simply need to enter ls and nothing else before submitting the command. Give it a try!
Our home directory /home/student has quite a few things in it.</description></item><item><title>Bash Command: echo</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/echo/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/echo/</guid><description>echo The next command echo simply prints out a message to the Bash shell&amp;rsquo;s Standard Output (STDOUT). An echo statement is very similar to the print() method in Python3, or the console.log() method in JavaScript, or the System.out.println() method in Java. View the following code snippets to see how you can display &amp;ldquo;hello&amp;rdquo; using Python, JavaScript, Java, and the Bash echo command.
python JavaScript Java Bash print(&amp;#34;Hello&amp;#34;) &amp;gt; console.</description></item><item><title>Bash Shell Variables</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/bash-shell-variables/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/bash-shell-variables/</guid><description>Bash Shell Variables The Bash shell has numerous variables that contain useful information. They are indicated by the following pattern: $VARIABLE_NAME.
We won&amp;rsquo;t look at all of the Bash Shell Variables, but we would like you to know about four of them:
$BASH $HOME $PATH $BASHPID To view the contents of any Bash Shell variable you can simply use the variable as the argument with the echo command.</description></item><item><title>Bash command: kill</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/kill/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/kill/</guid><description>kill command The kill command sends signals to a specific process. These signals give you a way to affect the process.
One of the most common signals we may want to send to a running process is to end the process. This would immediately stop the process and free up any CPU, RAM, or hard disk operations the process is currently utilizing.
Sending signals to a process is a powerful tool for using Linux.</description></item><item><title>Bash command: which</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/which/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/which/</guid><description>which command Most of the commands we have learned about in this class come standard as a part of the Ubuntu distribution we have been using. We will eventually learn about adding new commands and tools to our existing distribution. It is important to know the specific location of a command on your computer, something we can locate easily by using the which command.
The which command will give you the absolute path of the file that is being used to execute the instructions.</description></item><item><title>Getting Help</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/getting-help/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/getting-help/</guid><description>Getting Help There are tons of commands you can use in Linux. It would take an enormous amount of time for any person to learn all of them.
Luckily, Linux and GNU have provided multiple ways for us to learn about the various commands we may want to use.
man command The man command is used to bring up the reference manual for any given command. These reference manuals are often called man pages</description></item><item><title>Review</title><link>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/review/</link><pubDate>Thu, 17 Feb 2022 14:54:25 -0600</pubDate><guid>https://hugo.launchcodetechnicaltraining.org/linux/bash-introduction/walkthrough/review/</guid><description>Review We covered a lot of ground in this walkthrough. Look over the following list of terms used throughout this article:
Shell Terminal Emulator Bash Shell Bash Commands argument(s) option(s) pwd clear ls echo which Shell Variables $BASH $HOME $PATH $BASHPID Manual Pages man filename --help command --help In a future lesson we will learn even more about the Bash Shell in the form of file-system navigation, and file/directory creation, editing, and deleting.</description></item></channel></rss>