<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NGINX on Linux Introduction</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/</link><description>Recent content in NGINX on Linux Introduction</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Mar 2022 10:37:21 -0500</lastBuildDate><atom:link href="https://launchcodetechnicaltraining.org/linux/web-server/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/setup/</link><pubDate>Tue, 22 Mar 2022 10:37:21 -0500</pubDate><guid>https://launchcodetechnicaltraining.org/linux/web-server/nginx/setup/</guid><description>Installation Note Before beginning this walkthrough please shut down Caddy with the command sudo systemctl caddy stop. Caddy is running as a service in the background on port 80 which is the same that NGINX is going to attempt to use. This will prevent any issues trying to start NGINX.
There are multiple ways to install NGINX. This class recommends adding the official NGINX package repository and then installing the NGINX packages with the apt CLI.</description></item><item><title>nginx.conf</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/conf/</link><pubDate>Tue, 22 Mar 2022 10:37:21 -0500</pubDate><guid>https://launchcodetechnicaltraining.org/linux/web-server/nginx/conf/</guid><description>Warning This article assumes NGINX is installed, and the nginx.service is currently running. The nginx.service can be started by entering the following command:
systemctl start nginx NGINX Configuration NGINX is predominately driven by configuration files.
To configure NGINX to server static files, or to reverse proxy to a running web application framework NGINX requires a valid configuration file that instructs the NGINX web server on how to behave.</description></item><item><title>nginx -s reload</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/nginx-reload/</link><pubDate>Tue, 22 Mar 2022 10:37:21 -0500</pubDate><guid>https://launchcodetechnicaltraining.org/linux/web-server/nginx/nginx-reload/</guid><description>nginx CLI Command: reload The nginx.service is controlled with the systemctl tool, which is the preferred way of working with the running service. However, when an NGINX configuration file is altered systemctl has no way of instructing the service to reload the configuration.
The nginx CLI provides a command that allows you to reload the process, including any changed configuration files, this command is sudo nginx -s reload.
Bonus In total there are four signals you can send using the nginx CLI:</description></item><item><title>Static Website</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/static/</link><pubDate>Tue, 22 Mar 2022 10:37:21 -0500</pubDate><guid>https://launchcodetechnicaltraining.org/linux/web-server/nginx/static/</guid><description>Configuring NGINX to Serve a Static Website A common task performed by a web server is to serve websites.
Sometimes the website to be served is a static website. A static website only requires that the HTML, CSS, JS, and media files (like .jpgs) need to be served as an HTTP Response.
The default configuration of NGINX includes an example of a static website configuration.
The NGINX configuration file can be found at /etc/nginx/conf.</description></item><item><title>Reverse Proxy</title><link>https://launchcodetechnicaltraining.org/linux/web-server/nginx/reverse_proxy/</link><pubDate>Tue, 22 Mar 2022 10:37:21 -0500</pubDate><guid>https://launchcodetechnicaltraining.org/linux/web-server/nginx/reverse_proxy/</guid><description>Configuring NGINX as a Reverse Proxy A common task performed by a web server is to proxy HTTP requests to a running application server.
If you have completed an LC101 style course you predominately wrote code running in an application server.
Examples of application server frameworks:
Springboot (Java) Entity (C#) Express.js (Node) Flask (Python) Django (Python) Rails (Ruby) Cake (PHP) 1 million additional options for every single programming language under the sun The application server frameworks contain code that handle raw HTTP requests, perform certain actions, and serve an HTTP response.</description></item></channel></rss>